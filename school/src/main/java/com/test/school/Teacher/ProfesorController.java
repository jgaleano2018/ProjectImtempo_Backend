package com.test.school.Teacher;

import java.util.Optional;
import java.util.ArrayList;
import java.util.List;
import org.springframework.data.jpa.repository.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.test.school.Subject.Asignatura;
import com.test.school.Subject.AsignaturaEstudianteRepository;
import com.test.school.Subject.AsignaturaRepository;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(path="/school") // This means URL's start with /demo (after Application path)
public class ProfesorController {

	@Autowired // This means to get the bean called profesorRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private ProfesorRepository teacherRepository;
	private AsignaturaRepository asignaturaRepository;
	private AsignaturaEstudianteRepository asignaturaEstudianteRepository;
	
	
	
	@Autowired
	IProfesorService teacherService;	
	
	@GetMapping(path="/teacher")
	public @ResponseBody Iterable<Profesor> getAllTeacher() {
		// This returns a JSON or XML with the teachers
		return teacherRepository.findAll();
	}
	
	@GetMapping("/teacher/{id}")
	public @ResponseBody Iterable<AsignaturaEstudiante> getTeacherById(@PathVariable String id) {
		Long idRet = Long.parseLong(id);
		
		Optional<Profesor> modelTeacher = teacherRepository.findById(idRet);
				
		Iterable<Asignatura> iterAsignatura = asignaturaRepository.findAll();
		List<Asignatura> listAsignatura = new ArrayList<>();
		Asignatura modelAsignatura = new Asignatura();
		
		for (Asignatura item : iterAsignatura)
		{
			if (item.getProfesor().equals(modelTeacher)) {
				modelAsignatura = new Asignatura();
				modelAsignatura.setId(item.getId());
				modelAsignatura.setNombre(item.getNombre());
				modelAsignatura.setCursos(item.getCursos());
				modelAsignatura.setProfesor(item.getProfesor());
				
				listAsignatura.add(modelAsignatura);
			}
		}
		
		Iterable<com.test.school.Subject.AsignaturaEstudiante> iterAsignaturaEstudiante = asignaturaEstudianteRepository.findAll();
		List<AsignaturaEstudiante> listAsignaturaEstudiante = new ArrayList<>();
		AsignaturaEstudiante modelAsignaturaEstudiante = new AsignaturaEstudiante();
		
		for (com.test.school.Subject.AsignaturaEstudiante item : iterAsignaturaEstudiante)
		{
			for (Asignatura item2 : listAsignatura)
			{
				if (item.getAsignatura().equals(item2)) {
					
					modelAsignaturaEstudiante = new AsignaturaEstudiante();
					modelAsignaturaEstudiante.setNombreAsignatura(item2.getNombre());
					modelAsignaturaEstudiante.setNombreEstudiante(item.getEstudiante().getNombre());					
					
					listAsignatura.add(modelAsignatura);
				}
			}
		}
		
		
		return listAsignaturaEstudiante;
    }
	
	

	@RequestMapping(value="/saveTeacher",method=RequestMethod.POST)
    public Boolean saveTeacher(@RequestBody Profesor teacher){
          return teacherService.saveTeacher(teacher);
    }

	@RequestMapping(value="/updateTeacher",method=RequestMethod.PUT)
    public Boolean updateTeacher(@RequestBody Profesor teacher){
          return teacherService.updateTeacher(teacher);
    }
	
	@RequestMapping(value="/deleteTeacher",method=RequestMethod.DELETE)
	public void deleteTeacher(Profesor teacher) {
		teacherService.deleteTeacher(teacher);
	}
		
}


